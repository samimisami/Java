package spring101.teknikServis.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.WebSecurityConfigurer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import spring101.teknikServis.business.abstracts.SystemUserService;
import spring101.teknikServis.business.concretes.SystemUserManager;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    private SystemUserManager systemUserManager;

    @Bean
    public UserDetailsService userDetailsService() {
        return new SystemUserDetailsServiceImpl(systemUserManager);
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService()).passwordEncoder(passwordEncoder());
    }

    @Bean
    public WebSecurityConfigurer<WebSecurity> webSecurityConfigurer() {
        return new WebSecurityConfigurer<WebSecurity>() {
            @Override
            public void configure(WebSecurity web) {
                web.ignoring().antMatchers("/api/user/**"); // allow access to /api/user/**
            }

            @Override
            protected void configure(HttpSecurity http) throws Exception {
                http.authorizeRequests()
                    .anyRequest().authenticated()
                    .and().formLogin()
                    .and().logout()
                    .logoutUrl("/logout")
                    .logoutSuccessUrl("/login?logout")
                    .deleteCookies("JSESSIONID")
                    .invalidateHttpSession(true)
                    .permitAll();
            }
        };
    }
}
